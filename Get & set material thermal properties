using Autodesk.Revit.DB;
using Autodesk.Revit.UI;
using System.Collections.Generic;
using System;
using System.IO;
using WinForms = System.Windows.Forms;
using X = Microsoft.Office.Interop.Excel;
using System.Reflection;


namespace MyRevitCommands
{
    abstract class MaterialQuantityCalculator2
    {
        /// <summary>
        /// The list of elements for material quantity extraction.
        /// </summary>
        protected IList<Element> m_elementsToProcess2;
        

        /// <summary>
        /// Override this to populate the list of elements for material quantity extraction.
        /// </summary>
        protected abstract void CollectElements2();

        /// <summary>
        /// Override this to return the name of the element type calculated by this calculator.
        /// </summary>
        protected abstract String GetElementTypeName2();
        //protected abstract void CalculateMaterialQuantitiesOfElement2();

        /// <summary>
        /// Sets the document for the calculator class.
        /// </summary>
        public void SetDocument2(Document d)
        {
            m_doc = d;
            Autodesk.Revit.ApplicationServices.Application app = d.Application;
        }
        public void CalculateMaterialQuantities2()
        {
            CollectElements2();

            CalculateNetMaterialQuantities2();
            
        }
        private void CalculateNetMaterialQuantities2()
        {

             CalculateMaterialQuantitiesOfElement2();

        }





        public void StoreMaterialQuantities2 (ElementId materialId, string thc, string thcSTD, string sph, string sphSDT, string den, string denSTD, Dictionary<ElementId, MaterialQuantities> quantities)
        {
            MaterialQuantities materialQuantityPerElement;
            bool found = quantities.TryGetValue(materialId, out materialQuantityPerElement);
            if (found)
            {
                materialQuantityPerElement.thermalCondValue += thc;
                materialQuantityPerElement.thermalCondSTDValue += thcSTD;
                materialQuantityPerElement.specificHeatValue += sph;
                materialQuantityPerElement.specificHeatSTDValue += sphSDT;
                materialQuantityPerElement.densityValue += den;
                materialQuantityPerElement.densitySTDValue += denSTD;
            }
            else
            {
                materialQuantityPerElement = new MaterialQuantities();
                materialQuantityPerElement.thermalCondValue += thc;
                materialQuantityPerElement.thermalCondSTDValue += thcSTD;
                materialQuantityPerElement.specificHeatValue += sph;
                materialQuantityPerElement.specificHeatSTDValue += sphSDT;
                materialQuantityPerElement.densityValue += den;
                materialQuantityPerElement.densitySTDValue += denSTD;
                quantities.Add(materialId, materialQuantityPerElement);
            }

            
        }
        private void CalculateMaterialQuantitiesOfElement2()
        {


            // Let user select the Excel file (The Building Coder, http://thebuildingcoder.typepad.com)
            WinForms.OpenFileDialog dlg = new WinForms.OpenFileDialog();
            dlg.Title = "Select source Excel file from which to update Revit shared parameters";
            dlg.Filter = "Excel spreadsheet files (*.xls;*.xlsx)|*.xls;*.xlsx|All files (*)|*";
            if (WinForms.DialogResult.OK != dlg.ShowDialog())
            {
                TaskDialog.Show("error", "error in selecting the Excel file");
            }

            // Launch/Get Excel via COM Interop (The Building Coder, http://thebuildingcoder.typepad.com)
            X.Application excel = new X.Application();

            if (null == excel)
            {
                TaskDialog.Show("error", "Failed to get or start Excel.");
            }
            excel.Visible = true;
            X.Workbook workbook = excel.Workbooks.Open(dlg.FileName,
              Missing.Value, Missing.Value, Missing.Value,
              Missing.Value, Missing.Value, Missing.Value, Missing.Value,
              Missing.Value, Missing.Value, Missing.Value, Missing.Value,
              Missing.Value, Missing.Value, Missing.Value);
            X.Worksheet worksheet = workbook.ActiveSheet as X.Worksheet;

            // count the number of rows and columns
            long lastUsedRow = worksheet.Cells.Find("*", System.Reflection.Missing.Value,
                               System.Reflection.Missing.Value, System.Reflection.Missing.Value,
                               X.XlSearchOrder.xlByRows, X.XlSearchDirection.xlPrevious,
                               false, System.Reflection.Missing.Value, System.Reflection.Missing.Value).Row;

            long Lastcol = worksheet.Cells.Find("*", System.Reflection.Missing.Value,
                            System.Reflection.Missing.Value, System.Reflection.Missing.Value,
                            X.XlSearchOrder.xlByColumns, X.XlSearchDirection.xlPrevious,
                            false, System.Reflection.Missing.Value, System.Reflection.Missing.Value).Column;


            //find out if there is an empty cell in Excel
            X.Range range = worksheet.UsedRange;
            int i = 1;
            int j = 1;
            X.Range cellij = worksheet.Cells[i, j] as X.Range;
            for (i = 1; i < lastUsedRow; i++)
            {
                for (j = 1; j < Lastcol; j++)
                {
                    if (cellij[i, j].Value == null)
                    {
                        TaskDialog.Show("Exit Excel", "Empty cell found!");
                        excel.Quit();
                    }
                }
            }

            // Starting from row 2, loop the rows and extract parameter name and parameter value.
            int row = 2;
            string param_name = "";
            double param1_std = 0;
            double param2_std = 0;
            double param3_std = 0;
            double param4_std = 0;

            double param1_mean = 0;
            double param2_mean = 0;
            double param3_mean = 0;
            double param4_mean = 0;
            double param1_meanDistribution = 0;
            double param2_meanDistribution = 0;
            double param3_meanDistribution = 0;
            double param4_meanDistribution = 0;

        
            try
            {
                
                foreach (Element e in m_elementsToProcess2)
                {
                    
                        
                    ICollection<ElementId> materialIds = e.GetMaterialIds(false);
                    if (materialIds.Count != 0)
                    {
                        foreach (ElementId materialId in materialIds)
                        {

                            Material material = m_doc.GetElement(materialId) as Material;
                            //define variable "volume" for all materials in the file
                            ElementId thermalAssetId = material.ThermalAssetId;

                            if (thermalAssetId == ElementId.InvalidElementId)
                            {
                                CreateThermalAsset cta = new CreateThermalAsset();
                                cta.ThermalAsset(m_doc, material);
                                thermalAssetId = material.ThermalAssetId;
                            }
                            PropertySetElement pse = material.Document.GetElement(thermalAssetId) as PropertySetElement;

                            ThermalAsset asset = pse.GetThermalAsset();
                            //change the mean values for thermal properties based on the database
                            Parameter thCon = pse.get_Parameter(BuiltInParameter.PHY_MATERIAL_PARAM_THERMAL_CONDUCTIVITY);
                            Parameter thSHeat = pse.get_Parameter(BuiltInParameter.PHY_MATERIAL_PARAM_STRUCTURAL_SPECIFIC_HEAT);
                            Parameter thDen = pse.get_Parameter(BuiltInParameter.PHY_MATERIAL_PARAM_STRUCTURAL_DENSITY);



                            Parameter thConSTD = material.LookupParameter("Conductivity_std");
                            Parameter thSHeatSTD = material.LookupParameter("Specific_Heat_std");
                            Parameter thDenSTD = material.LookupParameter("Density_std");
                            Parameter param4 = material.LookupParameter("Thickness_std");

                            //assing values from the database to each standard values, also the mean values
                            while (row <= lastUsedRow)
                            {
                                X.Range first_cell = worksheet.Cells[row, 1] as X.Range;
                                X.Range next_cell = worksheet.Cells[row, 2] as X.Range;
                                X.Range next2_cell = worksheet.Cells[row, 3] as X.Range;
                                X.Range next3_cell = worksheet.Cells[row, 4] as X.Range;
                                X.Range next4_cell = worksheet.Cells[row, 5] as X.Range;
                                X.Range next5_cell = worksheet.Cells[row, 6] as X.Range;
                                X.Range next6_cell = worksheet.Cells[row, 7] as X.Range;
                                X.Range next7_cell = worksheet.Cells[row, 8] as X.Range;
                                X.Range next8_cell = worksheet.Cells[row, 9] as X.Range;
                                X.Range next9_cell = worksheet.Cells[row, 10] as X.Range;
                                X.Range next10_cell = worksheet.Cells[row, 12] as X.Range;
                                X.Range next11_cell = worksheet.Cells[row, 13] as X.Range;

                                param_name = first_cell.Value2;
                                param1_std = next_cell.Value2;
                                param2_std = next2_cell.Value2;
                                param3_std = next3_cell.Value2;
                                param4_std = next11_cell.Value2;

                                param1_mean = next4_cell.Value2;
                                param2_mean = next5_cell.Value2;
                                param3_mean = next6_cell.Value2;
                                param4_mean = next10_cell.Value2;

                                param1_meanDistribution = next7_cell.Value2;
                                param2_meanDistribution = next8_cell.Value2;
                                param3_meanDistribution = next9_cell.Value2;
                                param4_meanDistribution = next11_cell.Value2;

                                //chack to see if the material name in the library is the same as the material name in the database
                                if (material.Name == param_name)
                                {

                                    using (Transaction trans = new Transaction(m_doc, "Set Parameter"))
                                    {
                                        trans.Start();

                                        thConSTD.Set(param1_std);

                                        thSHeatSTD.Set(param2_std);

                                        thDenSTD.Set(param3_std);


                                        thCon.Set(param1_mean);

                                        thSHeat.Set(param2_mean); //There is a bug that prevents changing the value of specific heat through Revit API. Refer to the link below (4/15/2020):
                                                                  //I will change this value later in Grasshopper for the energy simulations.
                                                                  //thParam.Add(thSHeat);
                                        thDen.Set(param3_mean);


                                        trans.Commit();

                                        row++;

                                    }

                                }
                                else
                                {
                                    row++;
                                }

                            }
                            string thc = thCon.AsValueString();
                            string thcSTD = thConSTD.AsValueString();
                            string sph = thSHeat.AsValueString();
                            string sphSDT = thSHeatSTD.AsValueString();
                            string den = thDen.AsValueString();
                            string denSTD = thDenSTD.AsValueString();
                            StoreMaterialQuantities2(materialId, thc, thcSTD, sph, sphSDT, den, denSTD, m_totalQuantities);
                            Dictionary<ElementId, MaterialQuantities> quantityPerElement;
                            ElementId elementId = e.Id;
                            bool found = m_quantitiesPerElement.TryGetValue(elementId, out quantityPerElement);
                            if (found)
                            {
                                StoreMaterialQuantities2(materialId, thc, thcSTD, sph, sphSDT, den, denSTD, quantityPerElement);
                            }
                            else
                            {
                                quantityPerElement = new Dictionary<ElementId, MaterialQuantities>();
                                StoreMaterialQuantities2(materialId, thc, thcSTD, sph, sphSDT, den, denSTD, quantityPerElement);
                                m_quantitiesPerElement.Add(elementId, quantityPerElement);
                            }
                            row = 2;
                        }
                    }
                    
                    
                }
            }
            catch { }
            finally { }
            TaskDialog.Show("Exit Excel", "The parameters are successfully set!");
            excel.Quit();
            


        }
        /// <summary>
        /// Write results in CSV format to the indicated output writer.
        /// </summary>
        /// <param name="writer">The output text writer.</param>
        public void ReportResults(TextWriter writer)
        {
            if (m_totalQuantities.Count == 0)
                return;

            String legendLine = "Thermal Conductivity mean(W/m.K),Thermal Conductivity std(W/m.K),Specific Heat Capacity mean(J/g.C),Specific Heat Capacity std(J/g.C),Density mean(kg/m3),Density std(kg/m3)";
            //,Density(kg/m3),Thickness(m),Thermal Resistance (m2°K/W)
            writer.WriteLine();
            writer.WriteLine(String.Format("Totals for {0} elements,{1}", GetElementTypeName2(), legendLine));

            

            foreach (ElementId keyId in m_quantitiesPerElement.Keys)
            {
                if (m_quantitiesPerElement != null)
                {
                    ElementId id = keyId;
                    Element e = m_doc.GetElement(id);
                    writer.WriteLine();
                    writer.WriteLine(String.Format("Totals for {0} element {1} (id {2}),{3}",
                        GetElementTypeName2(),
                        e.Name.Replace(',', ':'), // Element names may have ',' in them
                        id.IntegerValue, legendLine));

                    Dictionary<ElementId, MaterialQuantities> quantities = m_quantitiesPerElement[id];
                    ReportResultsFor(quantities, writer);
                }
                
            }
        }

        /// <summary>
        /// Write the contents of one storage collection to the indicated output writer.
        /// </summary>
        /// <param name="quantities">The storage collection for material quantities.</param>
        /// <param name="writer">The output writer.</param>
        private void ReportResultsFor(Dictionary<ElementId, MaterialQuantities> quantities, TextWriter writer)
        {
            foreach (ElementId keyMaterialId in quantities.Keys)
            {
                ElementId materialId = keyMaterialId;
                MaterialQuantities quantity = quantities[materialId];

                Material material = m_doc.GetElement(materialId) as Material;

                writer.WriteLine(String.Format("{0},{1:F2},{2:F2},{3:F2},{4:F2},{5:F2},{6:F2}",
                    material.Name.Replace(',', ':'),  // Element names may have ',' in them
                    quantity.thermalCondValue, quantity.thermalCondSTDValue, quantity.specificHeatValue, 
                    quantity.specificHeatSTDValue, quantity.densityValue, quantity.densitySTDValue
                    ));
            }
        }

        #region Results Storage
        /// <summary>
        /// A storage of material quantities per individual element.
        /// </summary>
        public Dictionary<ElementId, Dictionary<ElementId, MaterialQuantities>> m_quantitiesPerElement = new Dictionary<ElementId, Dictionary<ElementId, MaterialQuantities>>();
       
            

        
        /// <summary>
        /// A storage of material quantities for the entire project.
        /// </summary>
        private readonly Dictionary<ElementId, MaterialQuantities> m_totalQuantities = new Dictionary<ElementId, MaterialQuantities>();

       
        #endregion

        protected Document m_doc;
        //private IEnumerable<WallType> wallTypes;
    }

    /// <summary>
    /// A storage class for the extracted material quantities.
    /// </summary>
    class MaterialQuantities
    {

        public string thermalCondValue { get; set; }
        public string thermalCondSTDValue { get; set; }

        public string specificHeatValue { get; set; }
        public string specificHeatSTDValue { get; set; }
        public string densityValue { get; set; }
        public string densitySTDValue { get; set; }
        
    }
    
        
    
    class WallMaterialQuantityCalculator2 : MaterialQuantityCalculator2
    {
        

        protected override void CollectElements2()
        {
            // filter for non-symbols that match the desired category so that inplace elements will also be found
            FilteredElementCollector collector = new FilteredElementCollector(m_doc);
            m_elementsToProcess2 = collector.OfCategory(BuiltInCategory.OST_Walls).WhereElementIsNotElementType().ToElements();

        }

        protected override string GetElementTypeName2()
        {
            return "Wall";
        }

    }
    class RoofMaterialQuantityCalculator2 : MaterialQuantityCalculator2
    {
        protected override void CollectElements2()
        {
            // filter for non-symbols that match the desired category so that inplace elements will also be found
            FilteredElementCollector collector = new FilteredElementCollector(m_doc);
            m_elementsToProcess2 = collector.OfCategory(BuiltInCategory.OST_Roofs).WhereElementIsNotElementType().ToElements();

        }

        protected override string GetElementTypeName2()
        {
            return "Roof";
        }

    }
    class FloorMaterialQuantityCalculator2 : MaterialQuantityCalculator2
    {
        protected override void CollectElements2()
        {
            // filter for non-symbols that match the desired category so that inplace elements will also be found
            FilteredElementCollector collector = new FilteredElementCollector(m_doc);
            m_elementsToProcess2 = collector.OfCategory(BuiltInCategory.OST_Floors).WhereElementIsNotElementType().ToElements();

        }

        protected override string GetElementTypeName2()
        {
            return "Floor";
        }

    }

}

